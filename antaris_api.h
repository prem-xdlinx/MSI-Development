///////////////////////////////////////////////////////////////////////////
///
///  

///  Copyright 2022 Antaris, Inc.

///  

///  Licensed under the Apache License, Version 2.0 (the 'License');

///  you may not use this file except in compliance with the License.

///  You may obtain a copy of the License at

///  

///  http://www.apache.org/licenses/LICENSE-2.0

///  

///  Unless required by applicable law or agreed to in writing, software

///  distributed under the License is distributed on an 'AS IS' BASIS,

///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

///  See the License for the specific language governing permissions and

///  limitations under the License.

///  

///  Copyright: Copyright 2022 Antaris, Inc.

///  This is an autogenerated file. Any changes made to this file would likely be over-written at build time.

///  Generated-From: antaris_api.xml

///
///////////////////////////////////////////////////////////////////////////


#pragma once
typedef unsigned char UINT8;
typedef char INT8;
typedef unsigned short int UINT16;
typedef short int INT16;
typedef unsigned int UINT32;
typedef int INT32;
typedef unsigned long long int UINT64;
typedef long long int INT64;
typedef float FLOAT;
typedef double DOUBLE;

/// @struct PayloadMetricsInfo
/// @brief Payload Metrics Parameters
struct PayloadMetricsInfo {
    UINT32                                          counter;                                         ///< @var Counter number
    INT8                                            names[16];                                       ///< @var Counter names, string
};

/// @struct PayloadMetricsResponse
/// @brief Payload Metrics Parameters
struct PayloadMetricsResponse {
    UINT16                                          correlation_id;                                  ///< @var correlation id for matching requests with responses and callbacks
    UINT64                                          timestamp;                                       ///< @var Capture time stamp
    UINT32                                          used_counter;                                    ///< @var Counters used out of maximum 32 counters
    PayloadMetricsInfo                              metrics[8];                                      ///< @var Counter values, maximum 32 counters
};


/// @struct AdcsEphemerisData
/// @brief ADCS EPH data
struct AdcsEphemerisData {
    DOUBLE                                          orbit_time;                                      ///< @var ADCS Orbit Propagator/System Time
    DOUBLE                                          eci_position_x;                                  ///< @var ECI Position X (km)
    DOUBLE                                          eci_position_y;                                  ///< @var ECI Position Y (km)
    DOUBLE                                          eci_position_z;                                  ///< @var ECI Position Z (km)
    DOUBLE                                          eci_velocity_x;                                  ///< @var ECI Velocity X (km/s)
    DOUBLE                                          eci_velocity_y;                                  ///< @var ECI Velocity Y (km/s)
    DOUBLE                                          eci_velocity_z;                                  ///< @var ECI Velocity Z (km/s)
    DOUBLE                                          ecef_position_x;                                 ///< @var ECEF Position X (km)
    DOUBLE                                          ecef_position_y;                                 ///< @var ECEF Position Y (km)
    DOUBLE                                          ecef_position_z;                                 ///< @var ECEF Position Z (km)
    DOUBLE                                          ecef_velocity_x;                                 ///< @var ECEF Velocity X (km/s)
    DOUBLE                                          ecef_velocity_y;                                 ///< @var ECEF Velocity Y (km/s)
    DOUBLE                                          ecef_velocity_z;                                 ///< @var ECEF Velocity Z (km/s)
    DOUBLE                                          ang_rate_x;                                      ///< @var X axis Angular rate (deg/s)
    DOUBLE                                          ang_rate_y;                                      ///< @var Y axis Angular rate (deg/s)
    DOUBLE                                          ang_rate_z;                                      ///< @var Z axis Angular rate (deg/s)
    DOUBLE                                          att_quat_1;                                      ///< @var Attitude Quaternion 1
    DOUBLE                                          att_quat_2;                                      ///< @var Attitude Quaternion 2
    DOUBLE                                          att_quat_3;                                      ///< @var Attitude Quaternion 3
    DOUBLE                                          att_quat_4;                                      ///< @var Attitude Quaternion 4
    FLOAT                                           latitude;                                        ///< @var Latitude (deg)
    FLOAT                                           longitude;                                       ///< @var Longitude (deg)
    FLOAT                                           altitude;                                        ///< @var Altitude (km)
    FLOAT                                           nadir_vector_x;                                  ///< @var X Nadir Vector
    FLOAT                                           nadir_vector_y;                                  ///< @var Y Nadir Vector
    FLOAT                                           nadir_vector_z;                                  ///< @var Z Nadir Vector
    FLOAT                                           gd_nadir_vector_x;                               ///< @var X Geodetic Nadir Vector
    FLOAT                                           gd_nadir_vector_y;                               ///< @var Y Geodetic Nadir Vector
    FLOAT                                           gd_nadir_vector_z;                               ///< @var Z Geodetic Nadir Vector
    FLOAT                                           beta_angle;                                      ///< @var Beta Angle (deg)
    UINT16                                          validity_flags;                                  ///< @var 1-bit flags = Time Validity,Position and Velocity ECI Validity, Position and Velocity ECEF Validity, Rate Validity, Attitude Validity,Lat-Lon-Altitude Validity,Nadir Vector Validity,GD Nadir Vector Validity,Beta Angle Validity
};




struct OBC_time {
    UINT8                                           hour;                                            ///< @var hour
    UINT8                                           minute;                                          ///< @var Minute
    UINT16                                          millisecond;                                     ///< @var millisecond
    UINT8                                           date;                                            ///< @var date
    UINT8                                           month;                                           ///< @var month
    UINT16                                          year;                                            ///< @var year
};

struct GpsEphemerisData {
    UINT32                                          gps_fix_time;                                    ///< @var GPS time
    UINT64                                          gps_sys_time;                                    ///< @var GPS System time
    OBC_time                                        obc_time;                                        ///< @var OBC time
    UINT32                                          gps_position_ecef[3];                            ///< @var GPS position
    UINT32                                          gps_velocity_ecef[3];                            ///< @var GPS velocity
    UINT32                                          gps_validity_flag_pos_vel;                       ///< @var GPS validity flag
};

struct GnssEphData {
    UINT16                                          correlation_id;                                  ///< @var correlation id for matching requests with responses and callbacks
    AdcsEphemerisData                               adcs_eph_data;                                   ///< @var ADCS data
    GpsEphemerisData                                gps_eph_data;                                    ///< @var GPS data
    UINT8                                           adcs_timeout_flag;                               ///< @var ADCS flag
    UINT8                                           gps_timeout_flag;                                ///< @var GPS flag
};

